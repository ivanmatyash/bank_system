// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/bank.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	proto/bank.proto

It has these top-level messages:
	Client
	Account
	Transaction
	RequestById
	RequestClient
	ResponseAccount
	ResponseClient
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Client struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Client) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Client) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type Account struct {
	Id       int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ClientId int32 `protobuf:"varint,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Balance  int64 `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Account) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type Transaction struct {
	Id        int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DiffMoney []int64 `protobuf:"varint,2,rep,packed,name=diff_money,json=diffMoney" json:"diff_money,omitempty"`
	Comment   string  `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	Success   bool    `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	Timestamp int64   `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetDiffMoney() []int64 {
	if m != nil {
		return m.DiffMoney
	}
	return nil
}

func (m *Transaction) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Transaction) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RequestById struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestById) Reset()                    { *m = RequestById{} }
func (m *RequestById) String() string            { return proto.CompactTextString(m) }
func (*RequestById) ProtoMessage()               {}
func (*RequestById) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestById) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RequestClient struct {
	Req *Client `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
}

func (m *RequestClient) Reset()                    { *m = RequestClient{} }
func (m *RequestClient) String() string            { return proto.CompactTextString(m) }
func (*RequestClient) ProtoMessage()               {}
func (*RequestClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestClient) GetReq() *Client {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResponseAccount struct {
	Result []*Account `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ResponseAccount) Reset()                    { *m = ResponseAccount{} }
func (m *ResponseAccount) String() string            { return proto.CompactTextString(m) }
func (*ResponseAccount) ProtoMessage()               {}
func (*ResponseAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResponseAccount) GetResult() []*Account {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResponseClient struct {
	Result []*Client `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ResponseClient) Reset()                    { *m = ResponseClient{} }
func (m *ResponseClient) String() string            { return proto.CompactTextString(m) }
func (*ResponseClient) ProtoMessage()               {}
func (*ResponseClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResponseClient) GetResult() []*Client {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Client)(nil), "api.Client")
	proto.RegisterType((*Account)(nil), "api.Account")
	proto.RegisterType((*Transaction)(nil), "api.Transaction")
	proto.RegisterType((*RequestById)(nil), "api.RequestById")
	proto.RegisterType((*RequestClient)(nil), "api.RequestClient")
	proto.RegisterType((*ResponseAccount)(nil), "api.ResponseAccount")
	proto.RegisterType((*ResponseClient)(nil), "api.ResponseClient")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BankService service

type BankServiceClient interface {
	ListClients(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseClient, error)
	ReadClient(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseClient, error)
	CreateClient(ctx context.Context, in *RequestClient, opts ...grpc.CallOption) (*ResponseClient, error)
	ListAccounts(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAccount, error)
	ReadAccount(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAccount, error)
}

type bankServiceClient struct {
	cc *grpc.ClientConn
}

func NewBankServiceClient(cc *grpc.ClientConn) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) ListClients(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseClient, error) {
	out := new(ResponseClient)
	err := grpc.Invoke(ctx, "/api.BankService/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) ReadClient(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseClient, error) {
	out := new(ResponseClient)
	err := grpc.Invoke(ctx, "/api.BankService/ReadClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) CreateClient(ctx context.Context, in *RequestClient, opts ...grpc.CallOption) (*ResponseClient, error) {
	out := new(ResponseClient)
	err := grpc.Invoke(ctx, "/api.BankService/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) ListAccounts(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAccount, error) {
	out := new(ResponseAccount)
	err := grpc.Invoke(ctx, "/api.BankService/ListAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) ReadAccount(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAccount, error) {
	out := new(ResponseAccount)
	err := grpc.Invoke(ctx, "/api.BankService/ReadAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BankService service

type BankServiceServer interface {
	ListClients(context.Context, *RequestById) (*ResponseClient, error)
	ReadClient(context.Context, *RequestById) (*ResponseClient, error)
	CreateClient(context.Context, *RequestClient) (*ResponseClient, error)
	ListAccounts(context.Context, *RequestById) (*ResponseAccount, error)
	ReadAccount(context.Context, *RequestById) (*ResponseAccount, error)
}

func RegisterBankServiceServer(s *grpc.Server, srv BankServiceServer) {
	s.RegisterService(&_BankService_serviceDesc, srv)
}

func _BankService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BankService/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).ListClients(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_ReadClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).ReadClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BankService/ReadClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).ReadClient(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BankService/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).CreateClient(ctx, req.(*RequestClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BankService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).ListAccounts(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_ReadAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).ReadAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BankService/ReadAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).ReadAccount(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

var _BankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClients",
			Handler:    _BankService_ListClients_Handler,
		},
		{
			MethodName: "ReadClient",
			Handler:    _BankService_ReadClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _BankService_CreateClient_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _BankService_ListAccounts_Handler,
		},
		{
			MethodName: "ReadAccount",
			Handler:    _BankService_ReadAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bank.proto",
}

func init() { proto.RegisterFile("proto/bank.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x49, 0xb6, 0x49, 0x93, 0xb7, 0x69, 0x1a, 0xc7, 0x2a, 0x4b, 0x6d, 0x20, 0x8c, 0x1e,
	0x72, 0xca, 0x42, 0x44, 0x04, 0x6f, 0xb6, 0x20, 0x44, 0xac, 0xc8, 0xe8, 0xc1, 0x5b, 0x99, 0xcc,
	0xbe, 0xd6, 0xa1, 0xd9, 0x99, 0xed, 0xce, 0x44, 0x28, 0xe2, 0xc5, 0xab, 0xe0, 0xc5, 0x8f, 0xe6,
	0x57, 0xf0, 0x83, 0xc8, 0xcc, 0xce, 0xd4, 0xb4, 0x16, 0xe9, 0x6d, 0xdf, 0xff, 0xbd, 0xf7, 0x7b,
	0xef, 0xff, 0x86, 0x85, 0x51, 0x55, 0x6b, 0xab, 0xf3, 0x25, 0x57, 0xe7, 0x33, 0xff, 0x49, 0x12,
	0x5e, 0xc9, 0xfd, 0x83, 0x33, 0xad, 0xcf, 0x56, 0x98, 0xf3, 0x4a, 0xe6, 0x5c, 0x29, 0x6d, 0xb9,
	0x95, 0x5a, 0x99, 0xa6, 0x84, 0x7e, 0x84, 0xee, 0xd1, 0x4a, 0xa2, 0xb2, 0x64, 0x08, 0x6d, 0x59,
	0x64, 0xad, 0x49, 0x6b, 0xda, 0x61, 0x6d, 0x59, 0x10, 0x02, 0x5b, 0x8a, 0x97, 0x98, 0xb5, 0x27,
	0xad, 0x69, 0x9f, 0xf9, 0x6f, 0xb2, 0x07, 0x1d, 0x2c, 0xb9, 0x5c, 0x65, 0x89, 0x17, 0x9b, 0xc0,
	0xa9, 0xd5, 0x27, 0xad, 0x30, 0xdb, 0x6a, 0x54, 0x1f, 0xd0, 0x77, 0xb0, 0xfd, 0x52, 0x08, 0xbd,
	0xbe, 0x05, 0xfd, 0x08, 0xfa, 0xc2, 0x0f, 0x3d, 0x91, 0x85, 0xe7, 0x77, 0x58, 0xaf, 0x11, 0x16,
	0x05, 0xc9, 0x60, 0x7b, 0xc9, 0x57, 0x5c, 0x09, 0xf4, 0x53, 0x12, 0x16, 0x43, 0xfa, 0xa3, 0x05,
	0xe9, 0x87, 0x9a, 0x2b, 0xc3, 0x85, 0xb3, 0xf0, 0x0f, 0x76, 0x0c, 0x50, 0xc8, 0xd3, 0xd3, 0x93,
	0x52, 0x2b, 0xbc, 0xcc, 0xda, 0x93, 0x64, 0x9a, 0xb0, 0xbe, 0x53, 0x8e, 0x9d, 0xe0, 0xc0, 0x42,
	0x97, 0x25, 0x2a, 0x1b, 0xd6, 0x8f, 0xa1, 0xcb, 0x98, 0xb5, 0x10, 0x68, 0x8c, 0xb7, 0xd0, 0x63,
	0x31, 0x24, 0x07, 0xd0, 0xb7, 0xb2, 0x44, 0x63, 0x79, 0x59, 0x65, 0x1d, 0xbf, 0xce, 0x5f, 0x81,
	0x8e, 0x21, 0x65, 0x78, 0xb1, 0x46, 0x63, 0x0f, 0x2f, 0x17, 0xc5, 0xcd, 0x7d, 0xe8, 0x0c, 0x76,
	0x42, 0x3a, 0x9c, 0x78, 0x0c, 0x49, 0x8d, 0x17, 0xbe, 0x22, 0x9d, 0xa7, 0x33, 0x5e, 0xc9, 0x59,
	0x93, 0x61, 0x4e, 0xa7, 0xcf, 0x61, 0x97, 0xa1, 0xa9, 0xb4, 0x32, 0x18, 0x2f, 0xf7, 0x04, 0xba,
	0x35, 0x9a, 0xf5, 0xca, 0x66, 0xad, 0x49, 0x32, 0x4d, 0xe7, 0x03, 0xdf, 0x14, 0xb2, 0x2c, 0xe4,
	0xe8, 0x33, 0x18, 0xc6, 0xc6, 0x30, 0xe9, 0xf1, 0x8d, 0xbe, 0x6b, 0xc3, 0x42, 0x6a, 0xfe, 0x3d,
	0x81, 0xf4, 0x90, 0xab, 0xf3, 0xf7, 0x58, 0x7f, 0x96, 0x02, 0xc9, 0x2b, 0x48, 0xdf, 0xc8, 0xb8,
	0xac, 0x21, 0x23, 0xdf, 0xb3, 0x61, 0x70, 0xff, 0x7e, 0x50, 0x36, 0x47, 0xd1, 0xd1, 0xb7, 0x5f,
	0xbf, 0x7f, 0xb6, 0x81, 0xf4, 0x72, 0x11, 0x1a, 0x5f, 0x03, 0x30, 0xe4, 0x45, 0x58, 0xe5, 0x8e,
	0x98, 0x07, 0x1e, 0xb3, 0x4b, 0x76, 0x22, 0x26, 0xff, 0x22, 0x8b, 0xaf, 0xe4, 0x2d, 0x0c, 0x8e,
	0x6a, 0xe4, 0x36, 0x1a, 0x23, 0x9b, 0xb4, 0x46, 0xfb, 0x2f, 0x8f, 0x5e, 0xad, 0xf5, 0xc2, 0xdd,
	0x98, 0x2c, 0x60, 0xe0, 0x3c, 0x86, 0x0b, 0xde, 0x66, 0x72, 0xef, 0x1a, 0x2d, 0x14, 0xd2, 0x7b,
	0x1e, 0x97, 0x92, 0x7e, 0xce, 0x63, 0xeb, 0xb1, 0x7b, 0x7d, 0x5e, 0xc4, 0xa7, 0xba, 0x2b, 0xe9,
	0xa1, 0x27, 0x8d, 0xc8, 0xf0, 0x8a, 0xe4, 0x9d, 0x2e, 0xbb, 0xfe, 0x87, 0x7c, 0xfa, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xb2, 0x1e, 0xbd, 0x0d, 0xc7, 0x03, 0x00, 0x00,
}
